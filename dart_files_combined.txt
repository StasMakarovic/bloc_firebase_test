File: lib\firebase_options.dart

--------------------------------------------------
// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyD7vj9-XmsWHkmGiV4LssYQf6aFLj7UxE4',
    appId: '1:779923091804:web:e500bd091a05f03132d199',
    messagingSenderId: '779923091804',
    projectId: 'bloc-firebase-test-696bf',
    authDomain: 'bloc-firebase-test-696bf.firebaseapp.com',
    storageBucket: 'bloc-firebase-test-696bf.appspot.com',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyBv9qHX5Kz1mIyRsrXxD6kFTiCtssXV6aA',
    appId: '1:779923091804:android:8a4560b38926981932d199',
    messagingSenderId: '779923091804',
    projectId: 'bloc-firebase-test-696bf',
    storageBucket: 'bloc-firebase-test-696bf.appspot.com',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyC3mhQkZoI7aqYer-iqXK71x40FXMe7YzA',
    appId: '1:779923091804:ios:77f1feaae94f18aa32d199',
    messagingSenderId: '779923091804',
    projectId: 'bloc-firebase-test-696bf',
    storageBucket: 'bloc-firebase-test-696bf.appspot.com',
    iosBundleId: 'com.example.blocFirebaseTest',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'AIzaSyC3mhQkZoI7aqYer-iqXK71x40FXMe7YzA',
    appId: '1:779923091804:ios:e1b5d62fd2597b1132d199',
    messagingSenderId: '779923091804',
    projectId: 'bloc-firebase-test-696bf',
    storageBucket: 'bloc-firebase-test-696bf.appspot.com',
    iosBundleId: 'com.example.blocFirebaseTest.RunnerTests',
  );
}

--------------------------------------------------
File: lib\main.dart

--------------------------------------------------
import 'package:bloc_firebase_test/bloc/sign_in_bloc/sign_in_bloc.dart';
import 'package:bloc_firebase_test/bloc/sign_up_bloc/sign_up_bloc.dart';
import 'package:bloc_firebase_test/dependency_injection/di_container.dart';
import 'package:bloc_firebase_test/presentation/screen/sign_in_screen.dart';
import 'package:bloc_firebase_test/presentation/screen/sign_up_screen.dart';
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'firebase_options.dart';

void main() async {
  setup();
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider<SignUpBloc>(
          create: (BuildContext context) => SignUpBloc(),
        ),
        BlocProvider<SignInBloc>(
          create: (BuildContext context) => SignInBloc(),
        ),
      ],
      child: MaterialApp(
        debugShowCheckedModeBanner: false,
        title: 'Flutter Demo',
        theme: ThemeData(
          colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue),
          useMaterial3: true,
        ),
        home: const SignUpScreen(),
      ),
    );
  }
}

--------------------------------------------------
File: lib\bloc\sign_in_bloc\sign_in_bloc.dart

--------------------------------------------------
import 'dart:async';

import 'package:bloc/bloc.dart';
import 'package:bloc_firebase_test/data/repository/auth.dart';
import 'package:bloc_firebase_test/dependency_injection/di_container.dart';
import 'package:bloc_firebase_test/exception/auth_exception.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:meta/meta.dart';

part 'sign_in_event.dart';
part 'sign_in_state.dart';

class SignInBloc extends Bloc<SignInEvent, SignInState> {
  SignInBloc() : super(SignInInitialState()) {
    on<SignInButtonClickedEvent>(signInButtonClickedEvent);
    on<SignUpNavigateButtonClickedEvent>(signUpNavigateButtonClickedEvent);
  }

  FutureOr<void> signInButtonClickedEvent(
      SignInButtonClickedEvent event, Emitter<SignInState> emit) async {
    final _authMethods = locator<AuthMethods>();

    emit(SignInLoadingState());
    try {
      await _authMethods.signIn(event.email, event.password);
      emit(SuccessfulSignInState());
    } on AuthException catch (e) {
      emit(ShowSnackBarState(e.message)); //known exception correctly handled
      emit(SignInInitialState());
    } catch (e) {
      emit(ShowSnackBarState(e.toString())); //unknown exceptions just printed
      emit(SignInInitialState());
    }
  }

  FutureOr<void> signUpNavigateButtonClickedEvent(
      SignUpNavigateButtonClickedEvent event, Emitter<SignInState> emit) {
    emit(NavigateToSignUpState());
  }
}

--------------------------------------------------
File: lib\bloc\sign_in_bloc\sign_in_event.dart

--------------------------------------------------
part of 'sign_in_bloc.dart';

@immutable
sealed class SignInEvent {}

final class SignInButtonClickedEvent extends SignInEvent {
  final String email;
  final String password;

  SignInButtonClickedEvent({required this.email, required this.password});
}

final class SignUpNavigateButtonClickedEvent extends SignInEvent {}

--------------------------------------------------
File: lib\bloc\sign_in_bloc\sign_in_state.dart

--------------------------------------------------
part of 'sign_in_bloc.dart';

@immutable
sealed class SignInState {}

sealed class SignInActionState extends SignInState {}

////////////////

final class SignInLoadingState extends SignInState {}

final class SignInInitialState extends SignInState {}

//////

final class SuccessfulSignInState extends SignInActionState {}

final class NavigateToSignUpState extends SignInActionState {}

final class ShowSnackBarState extends SignInActionState {
  final String errorMessage;

  ShowSnackBarState(this.errorMessage);
}

--------------------------------------------------
File: lib\bloc\sign_up_bloc\sign_up_bloc.dart

--------------------------------------------------
import 'dart:async';

import 'package:bloc/bloc.dart';
import 'package:bloc_firebase_test/data/repository/auth.dart';
import 'package:bloc_firebase_test/dependency_injection/di_container.dart';
import 'package:bloc_firebase_test/exception/auth_exception.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:meta/meta.dart';

part 'sign_up_event.dart';
part 'sign_up_state.dart';

class SignUpBloc extends Bloc<SignUpEvent, SignUpState> {
  SignUpBloc() : super(SignUpInitialState()) {
    on<SignUpButtonClickedEvent>(signUpButtonClickedEvent);
    on<SignInNavigateButtonClickedEvent>(signInNavigateButtonClickedEvent);
  }

  FutureOr<void> signUpButtonClickedEvent(
      SignUpButtonClickedEvent event, Emitter<SignUpState> emit) async {
    final _authMethods = locator<AuthMethods>();

    emit(SignUpLoadingState());
    try {
      await _authMethods.signUp(event.email, event.password);
      emit(SuccessfulSignUpState());
    } on AuthException catch (e) {
      emit(ShowSnackBarState(e.message)); //known exception corectly handeled
      emit(SignUpInitialState());
    } catch (e) {
      emit(ShowSnackBarState(e.toString())); //unknown exceptions just printed
      emit(SignUpInitialState());
    }
  }

  FutureOr<void> signInNavigateButtonClickedEvent(
      SignInNavigateButtonClickedEvent event, Emitter<SignUpState> emit) {
    emit(NavigateToSignInState());
  }
}

--------------------------------------------------
File: lib\bloc\sign_up_bloc\sign_up_event.dart

--------------------------------------------------
part of 'sign_up_bloc.dart';

@immutable
sealed class SignUpEvent {}

final class SignUpButtonClickedEvent extends SignUpEvent {
  final String email;
  final String password;

  SignUpButtonClickedEvent({required this.email, required this.password});
}

final class SignInNavigateButtonClickedEvent extends SignUpEvent {}

--------------------------------------------------
File: lib\bloc\sign_up_bloc\sign_up_state.dart

--------------------------------------------------
part of 'sign_up_bloc.dart';

@immutable
sealed class SignUpState {}

sealed class SignUpActionState extends SignUpState {}

////////////////

final class SignUpLoadingState extends SignUpState {}

final class SignUpInitialState extends SignUpState {}

//////

final class SuccessfulSignUpState extends SignUpActionState {}

final class NavigateToSignInState extends SignUpActionState {}

final class ShowSnackBarState extends SignUpActionState {
  final String errorMessage;

  ShowSnackBarState(this.errorMessage);
}

--------------------------------------------------
File: lib\core\const\api_key.dart

--------------------------------------------------


--------------------------------------------------
File: lib\data\repository\auth.dart

--------------------------------------------------
import 'package:bloc_firebase_test/dependency_injection/di_container.dart';
import 'package:bloc_firebase_test/exception/auth_exception.dart';
import 'package:bloc_firebase_test/model/user.dart' as model;
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:uuid/uuid.dart';

class AuthMethods {
  final FirebaseAuth _auth = locator<FirebaseAuth>();
  final FirebaseFirestore _firestore = locator<FirebaseFirestore>();

  User? getCurrentUser() {
    final currentUser = _auth.currentUser;
    return currentUser;
  }

  Future<void> test(String name, String password) async {
    await _auth.createUserWithEmailAndPassword(email: name, password: password);
    await _firestore
        .collection('rokonogo')
        .doc('nome')
        .set({'janez': 'koliko'});
  }

  Future<void> signUp(String email, String password) async {
    try {
      final credential = await _auth.createUserWithEmailAndPassword(
        email: email,
        password: password,
      );
      final currentUser = credential.user;
      if (currentUser != null) {
        final user = model.User(
            email: currentUser.email ?? 'no email', uid: currentUser.uid);
        await _firestore.collection('users').doc(user.uid).set(user.toMap());
      }
    } on FirebaseAuthException catch (e) {
      if (e.code == 'weak-password') {
        throw AuthException(message: 'password provided is too short');
      } else if (e.code == 'email-already-in-use') {
        throw AuthException(message: 'this email is already used');
      } else if (e.code == 'invalid-email') {
        throw AuthException(message: 'bad formated email');
      } else if (e.code == 'network-request-failed') {
        throw AuthException(message: 'No internet connection.');
      } else {
        throw AuthException(message: 'something another');
      }
    } catch (e) {
      throw e;
    }
    ;
  }

  Future<void> signIn(String email, String password) async {
    try {
      final credential = await _auth.signInWithEmailAndPassword(
          email: email, password: password);
    } on FirebaseAuthException catch (e) {
      if (e.code == 'user-not-found') {
        print('No user found for that email.');
      } else if (e.code == 'wrong-password') {
        print('Wrong password provided for that user.');
      }
    }
  }

  Future<void> logOut() async {
    await _auth.signOut();
  }
}

--------------------------------------------------
File: lib\dependency_injection\di_container.dart

--------------------------------------------------
import 'package:bloc_firebase_test/data/repository/auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:get_it/get_it.dart';

final locator = GetIt.instance;

void setup() {
  locator.registerLazySingleton<FirebaseFirestore>(
      () => FirebaseFirestore.instance);
  locator.registerLazySingleton<FirebaseAuth>(() => FirebaseAuth.instance);
  locator.registerLazySingleton<AuthMethods>(() => AuthMethods());
}

--------------------------------------------------
File: lib\exception\auth_exception.dart

--------------------------------------------------
class AuthException implements Exception {
  final String message;

  AuthException({required this.message});
}

--------------------------------------------------
File: lib\model\user.dart

--------------------------------------------------
// ignore_for_file: public_member_api_docs, sort_constructors_first
import 'dart:convert';

class User {
  String email;
  String uid;
  User({
    required this.email,
    required this.uid,
  });

  User copyWith({
    String? email,
    String? uid,
  }) {
    return User(
      email: email ?? this.email,
      uid: uid ?? this.uid,
    );
  }

  Map<String, dynamic> toMap() {
    return <String, dynamic>{
      'email': email,
      'uid': uid,
    };
  }

  factory User.fromMap(Map<String, dynamic> map) {
    return User(
      email: map['email'] as String,
      uid: map['uid'] as String,
    );
  }

  String toJson() => json.encode(toMap());

  factory User.fromJson(String source) =>
      User.fromMap(json.decode(source) as Map<String, dynamic>);

  @override
  String toString() => 'User(email: $email, uid: $uid)';

  @override
  bool operator ==(covariant User other) {
    if (identical(this, other)) return true;

    return other.email == email && other.uid == uid;
  }

  @override
  int get hashCode => email.hashCode ^ uid.hashCode;
}

--------------------------------------------------
File: lib\presentation\screen\home_screen.dart

--------------------------------------------------
import 'package:bloc_firebase_test/data/repository/auth.dart';
import 'package:bloc_firebase_test/dependency_injection/di_container.dart';
import 'package:bloc_firebase_test/presentation/screen/sign_in_screen.dart';
import 'package:flutter/material.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final _authMethods = locator<AuthMethods>();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Home'),
        actions: [
          IconButton(
              onPressed: () async {
                try {
                  await _authMethods.logOut();
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => SignInScreen()),
                  );
                } catch (e) {
                  print(e.toString());
                }
              },
              icon: Icon(Icons.logout_rounded))
        ],
      ),
      body: Center(
        child: Text('Welcome to home screen!'),
      ),
    );
  }
}

--------------------------------------------------
File: lib\presentation\screen\sign_in_screen.dart

--------------------------------------------------
import 'package:bloc_firebase_test/bloc/sign_in_bloc/sign_in_bloc.dart';
import 'package:bloc_firebase_test/presentation/screen/home_screen.dart';
import 'package:bloc_firebase_test/presentation/screen/sign_up_screen.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class SignInScreen extends StatefulWidget {
  const SignInScreen({super.key});

  @override
  State<SignInScreen> createState() => _SignInScreenState();
}

class _SignInScreenState extends State<SignInScreen> {
  final TextEditingController emailTextEditingController =
      TextEditingController();
  final TextEditingController passwordTextEditingController =
      TextEditingController();

  @override
  void dispose() {
    emailTextEditingController.dispose();
    passwordTextEditingController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return BlocConsumer<SignInBloc, SignInState>(
      listenWhen: (previous, current) => current is SignInActionState,
      buildWhen: (previous, current) => current is! SignInActionState,
      listener: (context, state) {
        if (state is NavigateToSignUpState) {
          Navigator.pop(context);
        } else if (state is ShowSnackBarState) {
          ScaffoldMessenger.of(context)
              .showSnackBar(SnackBar(content: Text(state.errorMessage)));
        } else if (state is SuccessfulSignInState) {
          Navigator.pushReplacement(
              context, MaterialPageRoute(builder: (context) => HomeScreen()));
        }
      },
      builder: (context, state) {
        if (state is SignInInitialState) {
          return Scaffold(
            backgroundColor: Colors.grey[100],
            appBar: AppBar(
              title: Text('Sign in'),
              actions: [
                TextButton(
                    onPressed: () {
                      context
                          .read<SignInBloc>()
                          .add(SignUpNavigateButtonClickedEvent());
                    },
                    child: Text('Sign up'))
              ],
            ),
            body: Padding(
              padding: const EdgeInsets.all(30.0),
              child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    TextField(
                      controller: emailTextEditingController,
                      decoration: InputDecoration(hintText: 'email'),
                    ),
                    SizedBox(
                      height: 20,
                    ),
                    TextField(
                      controller: passwordTextEditingController,
                      decoration: InputDecoration(hintText: 'password'),
                    ),
                    SizedBox(
                      height: 30,
                    ),
                    ElevatedButton(
                        onPressed: () {
                          context.read<SignInBloc>().add(
                              SignInButtonClickedEvent(
                                  email: emailTextEditingController.text,
                                  password:
                                      passwordTextEditingController.text));
                        },
                        child: Text('Sign in')),
                  ]),
            ),
          );
        } else if (state is SignInLoadingState) {
          return Scaffold(
            body: Center(child: CircularProgressIndicator()),
          );
        } else {
          return Scaffold(
            body: Center(
              child: Text('something went wrong!'),
            ),
          );
        }
      },
    );
  }
}

--------------------------------------------------
File: lib\presentation\screen\sign_up_screen.dart

--------------------------------------------------
import 'package:bloc_firebase_test/bloc/sign_up_bloc/sign_up_bloc.dart';
import 'package:bloc_firebase_test/presentation/screen/home_screen.dart';
import 'package:bloc_firebase_test/presentation/screen/sign_in_screen.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class SignUpScreen extends StatefulWidget {
  const SignUpScreen({super.key});

  @override
  State<SignUpScreen> createState() => _SignUpScreenState();
}

class _SignUpScreenState extends State<SignUpScreen> {
  final TextEditingController emailTextEditingController =
      TextEditingController();
  final TextEditingController passwordTextEditingController =
      TextEditingController();

  @override
  void dispose() {
    // TODO: implement dispose
    emailTextEditingController.dispose();
    passwordTextEditingController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return BlocConsumer<SignUpBloc, SignUpState>(
      listenWhen: (previous, current) => current is SignUpActionState,
      buildWhen: (previous, current) => current is! SignUpActionState,
      listener: (context, state) {
        if (state is NavigateToSignInState) {
          Navigator.push(
            context,
            MaterialPageRoute(builder: (context) => SignInScreen()),
          );
        } else if (state is ShowSnackBarState) {
          ScaffoldMessenger.of(context)
              .showSnackBar(SnackBar(content: Text(state.errorMessage)));
        } else if (state is SuccessfulSignUpState) {
          Navigator.pushReplacement(
              context, MaterialPageRoute(builder: (context) => HomeScreen()));
        }
      },
      builder: (context, state) {
        if (state is SignUpInitialState) {
          return Scaffold(
            appBar: AppBar(
              title: Text('Sign up'),
              actions: [
                TextButton(
                    onPressed: () {
                      context
                          .read<SignUpBloc>()
                          .add(SignInNavigateButtonClickedEvent());
                    },
                    child: Text('Sign in'))
              ],
            ),
            body: Padding(
              padding: const EdgeInsets.all(30.0),
              child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    TextField(
                      controller: emailTextEditingController,
                      decoration: InputDecoration(hintText: 'email'),
                    ),
                    SizedBox(
                      height: 20,
                    ),
                    TextField(
                      controller: passwordTextEditingController,
                      decoration: InputDecoration(hintText: 'password'),
                    ),
                    SizedBox(
                      height: 30,
                    ),
                    ElevatedButton(
                        onPressed: () {
                          context.read<SignUpBloc>().add(
                              SignUpButtonClickedEvent(
                                  email: emailTextEditingController.text,
                                  password:
                                      passwordTextEditingController.text));
                        },
                        child: Text('Sign up')),
                  ]),
            ),
          );
        } else if (state is SignUpLoadingState) {
          return Scaffold(
            body: Center(child: CircularProgressIndicator()),
          );
        } else {
          return Scaffold(
            body: Center(
              child: Text('something went wrong!'),
            ),
          );
        }
      },
    );
  }
}

--------------------------------------------------
